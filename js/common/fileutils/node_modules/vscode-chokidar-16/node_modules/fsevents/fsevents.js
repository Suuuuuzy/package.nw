"use strict";if("darwin"!==process.platform)throw new Error(`Module 'fsevents' is not compatible with platform '${process.platform}'`);const Native=require("./fsevents.node"),events=Native.constants;function watch(e,t,n){if("string"!=typeof e)throw new TypeError("fsevents argument 1 must be a string and not a "+typeof e);if("function"==typeof t&&void 0===n&&(n=t,t=Native.flags.SinceNow),"number"!=typeof t)throw new TypeError("fsevents argument 2 must be a number and not a "+typeof t);if("function"!=typeof n)throw new TypeError("fsevents argument 3 must be a function and not a "+typeof n);let o=Native.start(Native.global,e,t,n);if(!o)throw new Error(`could not watch: ${e}`);return()=>{const e=o?Promise.resolve(o).then(Native.stop):Promise.resolve(void 0);return o=void 0,e}}function getInfo(e,t){return{path:e,flags:t,event:getEventType(t),type:getFileType(t),changes:getFileChanges(t)}}function getFileType(e){return events.ItemIsFile&e?"file":events.ItemIsDir&e?"directory":events.ItemIsSymlink&e?"symlink":void 0}function anyIsTrue(e){for(let t in e)if(e[t])return!0;return!1}function getEventType(e){return events.ItemRemoved&e?"deleted":events.ItemRenamed&e?"moved":events.ItemCreated&e?"created":events.ItemModified&e?"modified":events.RootChanged&e?"root-changed":events.ItemCloned&e?"cloned":anyIsTrue(e)?"modified":"unknown"}function getFileChanges(e){return{inode:!!(events.ItemInodeMetaMod&e),finder:!!(events.ItemFinderInfoMod&e),access:!!(events.ItemChangeOwner&e),xattrs:!!(events.ItemXattrMod&e)}}exports.watch=watch,exports.getInfo=getInfo,exports.constants=events;