!function(require, directRequire){
"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.ConditionCompiler=void 0;const tslib_1=require("tslib"),path_1=tslib_1.__importDefault(require("path")),define_1=require("../../../config/define"),plant_1=require("./compiler/plant"),json_1=require("./compiler/json"),macro_1=require("./compiler/macro"),minimatch_1=tslib_1.__importDefault(require("minimatch")),tools_1=require("../../../utils/tools"),defaultCompileSetting={targetPlatform:define_1.PLATFORM["mini-wechat"],targetPlatformDefines:{}};class ConditionCompiler{constructor(t,e){this.extToCompiler={},this.project=t,this.devtoolMessagehub=e}getCompiler(t,e){const{targetPlatform:o,targetPlatformDefines:r={}}=e;if(!Object.values(define_1.PLATFORM).includes(o))throw new Error(`platform ${o} is not supported`);if(!this.extToCompiler[t]){let e=null;const i={targetPlatform:o,targetPlatformDefines:r,type:t};e=[".wxml",".wxss",".less",".scss",".wxs",".ts",".js"].includes(t)?new macro_1.MacroConditionCompiler(i):".json"===t?new json_1.JSONConditionCompiler(i):new plant_1.PlantConditionCompiler(i),this.extToCompiler[t]=e}return this.extToCompiler[t].targetPlatform=e.targetPlatform,this.extToCompiler[t].targetPlatformDefines=e.targetPlatformDefines||{},this.extToCompiler[t]}shouldCompile(t){return!this.project.miniprogramRoot||this.project.miniprogramRoot&&t.startsWith(this.project.miniprogramRoot)||"project.config.json"===t||"project.private.config.json"===t}compileFile(t,e=defaultCompileSetting){var o;try{const o=path_1.default.join(this.project.projectPath,t),r=path_1.default.extname(o),i=this.getCompiler(r,e).compile(o,this.project.getFile("",t));return Buffer.isBuffer(i)?i:Buffer.from(i)}catch(t){throw null===(o=this.devtoolMessagehub)||void 0===o||o.showBuildLog("compileFile","error",t.message),t}}compileProject(t=defaultCompileSetting){var e;if(!Object.values(define_1.PLATFORM).includes(t.targetPlatform))throw new Error(`platform ${t.targetPlatform} is not supported`);try{const e={},{targetPlatform:o,targetPlatformDefines:r={}}=t;this.project.getFileList().forEach(t=>{if(!this.shouldCompile(t))return;const i=this.compileFile(t,{targetPlatform:o,targetPlatformDefines:r});e[t]=i})}catch(t){throw null===(e=this.devtoolMessagehub)||void 0===e||e.showBuildLog("compileProject","error",t.message),t}return{}}filterResourceByPlatfrom(t=defaultCompileSetting){const{targetPlatform:e=define_1.PLATFORM["mini-wechat"]}=t;let o=this.project.getFileList();return((0,tools_1.getAppJson)(this.project,e).static||[]).forEach(t=>{const{pattern:r="",platforms:i=[]}=t,l=path_1.default.join(this.project.miniprogramRoot||"",r);if(!i.includes(e)){const t=o.filter(t=>(0,minimatch_1.default)(t,l));o=o.filter(e=>!t.includes(e)&&e!==l&&!(0,tools_1.normalizePath)(e).startsWith((0,tools_1.normalizePath)(l)))}}),o}}exports.ConditionCompiler=ConditionCompiler;
}(require("licia/lazyImport")(require), require)