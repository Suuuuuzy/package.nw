!function(require, directRequire){
"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.IOSUtils=void 0;const tslib_1=require("tslib"),child_process=tslib_1.__importStar(require("child_process")),path_1=tslib_1.__importDefault(require("path")),fs_extra_1=tslib_1.__importDefault(require("fs-extra")),env_1=require("../../../utils/env"),deviceUtils=tslib_1.__importStar(require("./device")),projectConfigUtils=tslib_1.__importStar(require("./projectconfig")),cp_1=require("../../../utils/cp");class IOSUtils{constructor(e,t={}){this.root=e,this.userConfig=t}getProjectConfig(){const e=projectConfigUtils.getProjectConfig(this.root,this.userConfig);if(!e)throw new Error("iOS project folder not found. Are you sure this is a miniapp project?");return e}getBundleId(e){return child_process.execFileSync("/usr/libexec/PlistBuddy",["-c","Print:CFBundleIdentifier",path_1.default.join(e,"Info.plist")],{encoding:"utf8",env:(0,env_1.getProcessEnv)()}).trim()}tryInstallPod(e,t){const i=this.getProjectConfig(),{sourceDir:r}=i,s={cwd:r,env:(0,env_1.getProcessEnv)()};t.progress("export LANG=en_US.UTF-8 && pod install"),child_process.execSync("export LANG=en_US.UTF-8 && pod install",s)}async run(e,t){const i=this.getProjectConfig(),{sourceDir:r}=i;process.chdir(r),this.tryInstallPod(e,t);const s=path_1.default.basename(i.name,path_1.default.extname(i.name)),n=e.scheme||s;t.progress(`Found Xcode ${i.isWorkspace?"workspace":"project"} "${i.name}"`);const o=deviceUtils.getDevices(t);if(e.device||e.udid){if(e.udid||e.device){const r=o.find(t=>t.udid===e.udid||t.name===e.device);if(!r)throw new Error(`Could not find a device with udid(${e.udid}) or device(${e.device}). ${deviceUtils.printFoundDevices(o)}`);return"simulator"===r.type?this.runOnSimulator(i,n,e,t):this.runOnDevice(r,n,i,e,t)}}else await this.runOnSimulator(i,n,e,t)}async build(e,t){const i=this.getProjectConfig();process.chdir(i.sourceDir);const r=path_1.default.basename(i.name,path_1.default.extname(i.name)),s=e.scheme||r;this.tryInstallPod(e,t),t.progress("start build ipa...");const n=await this.buildProjectArchive(i,{output:e.output,scheme:s},t),o=await this.exportArchive(i,n,e,t);return console.log("Successfully build ipa: "+o),o}async runOnSimulator(e,t,i,r){let s;try{s=JSON.parse(child_process.execFileSync("xcrun",["simctl","list","--json","devices"],{encoding:"utf8",env:(0,env_1.getProcessEnv)()}))}catch(e){throw new Error("Could not get the simulator list from Xcode. Please open Xcode and try running project directly from there to resolve the remaining issues."+e.message)}const n=["iPhone 13","iPhone 12","iPhone 11"].reduce((e,t)=>e||deviceUtils.findMatchingSimulator(s,{device:t}),deviceUtils.findMatchingSimulator(s,i));if(!n)throw new Error("No simulator available with "+(i.device?`name "${i.device}"`:`udid "${i.udid}"`));const o=child_process.execFileSync("xcode-select",["-p"],{encoding:"utf8",env:(0,env_1.getProcessEnv)()}).trim();if(child_process.execFileSync("open",[o+"/Applications/Simulator.app","--args","-CurrentDeviceUDID",n.udid],{env:(0,env_1.getProcessEnv)()}),!n.booted){const e=deviceUtils.formattedDeviceName(n);r.progress("Launching "+e),child_process.spawnSync("xcrun",["simctl","boot",n.udid],{env:(0,env_1.getProcessEnv)()})}const{appPath:c}=await this.buildProjectApp(e,{udid:n.udid,scheme:t},r);await this.installApp(n,c,r),await this.launchApp(n,c,r)}async runOnDevice(e,t,i,r,s){const{appPath:n}=await this.buildProjectApp(i,{udid:e.udid,scheme:t},s);if("catalyst"===e.type){child_process.spawn(`${n}/${t}`,[],{detached:!0,stdio:"ignore",env:(0,env_1.getProcessEnv)()}).unref()}else{const t=["--bundle",n,"--id",e.udid,"--justlaunch"];s.progress("Installing and launching your app on "+e.name);const i=path_1.default.join(__dirname,"../../../vendor/ios-deploy/ios-deploy");await(0,cp_1.spawnSync)(i,t,{},s)}return s.progress("Installed the app on the device.")}buildProjectApp(e,t,i){return new Promise((r,s)=>{const{scheme:n,udid:o}=t,c=[e.isWorkspace?"-workspace":"-project",e.name,"-scheme",n];let a;o&&c.push("-destination","id="+o),i.progress(`Building (using "xcodebuild ${c.join(" ")}")`),this.xcbeautifyAvailable()?a=child_process.spawn("xcbeautify",[],{stdio:["pipe",process.stdout,process.stderr],env:(0,env_1.getProcessEnv)()}):this.xcprettyAvailable()&&(a=child_process.spawn("xcpretty",[],{stdio:["pipe",process.stdout,process.stderr],env:(0,env_1.getProcessEnv)()}));const d=child_process.spawn("xcodebuild",c,{env:(0,env_1.getProcessEnv)()});let u="",p="";d.stdout.on("data",e=>{const t=e.toString();i.progress(t),u+=t,a&&a.stdin.write(e)}),d.stderr.on("data",e=>{const t=e.toString();p+=t,i.progress(t)}),d.on("close",t=>{if(a&&a.stdin.end(),0!==t)return void s(new Error(` Failed to build iOS project.\n              We ran "xcodebuild" command but it exited with error code ${t}. To debug build\n              logs further, consider building your app with Xcode.app, by opening\n              ${e.name}.\n              ${a?void 0:`${u}\n${p}`}\n            `));let o;try{o=this.getBuildInfo(e,u,n)}catch(e){s(e)}i.progress("Successfully built the app"),r(o)})})}async installApp(e,t,i){const r=["simctl","install",e.udid,t];await(0,cp_1.spawnSync)("xcrun",r,{},i)}async launchApp(e,t,i){const r=this.getBundleId(t),s=["simctl","launch",e.udid,r];await(0,cp_1.spawnSync)("xcrun",s,{},i),i.progress("Successfully launched the app on the simulator")}async buildProjectArchive(e,t,i){const{output:r,scheme:s,udid:n}=t,o=path_1.default.join(r,"./app"),{sourceDir:c}=e;fs_extra_1.default.ensureDirSync(path_1.default.dirname(o));const a=["archive",e.isWorkspace?"-workspace":"-project",e.name,"-scheme",s,"-archivePath",o];n&&a.push("-destination","id="+n);try{if(await(0,cp_1.spawnSync)("xcodebuild",a,{cwd:c},i),!fs_extra_1.default.existsSync(o+".xcarchive"))throw new Error(`Failed to build iOS project.\n          ${o+".xcarchive"} does not found\n        `);return i.progress(`Successfully archive the app: ${o}.xcarchive`),o+".xcarchive"}catch(t){throw new Error(`Failed to build iOS project. To debug build\n        logs further, consider building your app with Xcode.app, by opening\n        ${e.name}.\n      `)}}async exportArchive(e,t,i,r){const s=path_1.default.join(i.output,"ipa");fs_extra_1.default.ensureDirSync(s),fs_extra_1.default.emptyDirSync(s);const{exportOptionPlistPath:n}=i;if(!n)throw new Error("build ios ipa require exportOptionPlistPath in project.miniapp.json");let o="";o=path_1.default.isAbsolute(n)?n:path_1.default.join(i.projectPath,n);const c=["-exportArchive","-archivePath",t,"-exportOptionsPlist",o,"-exportPath",s];try{await(0,cp_1.spawnSync)("xcodebuild",c,{cwd:e.sourceDir},r)}catch(t){throw new Error(`To debug build\n            logs further, consider building your app with Xcode.app, by opening\n            ${e.name}.\n          `)}return fs_extra_1.default.removeSync(t),s}getTargetPaths(e){const t=JSON.parse(e);for(const e in t){if("app"===t[e].buildSettings.WRAPPER_EXTENSION)return{targetBuildDir:t[e].buildSettings.TARGET_BUILD_DIR,executableFolderPath:t[e].buildSettings.EXECUTABLE_FOLDER_PATH}}return{}}getBuildInfo(e,t,i){const r=this.getPlatformName(t),s=[e.isWorkspace?"-workspace":"-project",e.name,"-scheme",i,"-sdk",r,"-showBuildSettings","-json"].join(" "),n=child_process.execSync("xcodebuild "+s,{encoding:"utf8",cwd:e.sourceDir,env:(0,env_1.getProcessEnv)()}),o=this.getBuildProductDir(t),{executableFolderPath:c}=this.getTargetPaths(n);if(!c)throw new Error("Failed to get the app name.");return{sdk:r,appPath:`${o}/${c}`}}getPlatformName(e){const t=/export PLATFORM_NAME\\?="?(\w+)"?$/m.exec(e);if(!t)throw new Error("Couldn't find PLATFORM_NAME in xcodebuild output.");return t[1]}getBuildProductDir(e){const t=/export BUILT_PRODUCTS_DIR\\?="?(.+)"?$/m.exec(e);if(!t)throw new Error("Couldn't find BUILT_PRODUCTS_DIR in xcodebuild output.");return t[1]}xcbeautifyAvailable(){try{child_process.execSync("xcbeautify --version",{stdio:[0,"pipe","ignore"],env:(0,env_1.getProcessEnv)()})}catch(e){return!1}return!0}xcprettyAvailable(){try{child_process.execSync("xcpretty --version",{stdio:[0,"pipe","ignore"],env:(0,env_1.getProcessEnv)()})}catch(e){return!1}return!0}}exports.IOSUtils=IOSUtils;
}(require("licia/lazyImport")(require), require)