!function(require, directRequire){
"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.IOSUtils=void 0;const tslib_1=require("tslib"),child_process=tslib_1.__importStar(require("child_process")),path_1=tslib_1.__importDefault(require("path")),fs_extra_1=tslib_1.__importDefault(require("fs-extra")),glob_1=tslib_1.__importDefault(require("glob")),env_1=require("../../../utils/env"),deviceUtils=tslib_1.__importStar(require("./device")),projectConfigUtils=tslib_1.__importStar(require("./projectconfig")),cp_1=require("../../../utils/cp"),miniapp_builder_1=require("../../../utils/miniapp-builder"),miniappJson_1=require("../../../utils/miniappJson"),uuidv4=require("uuid/v4"),sizeOf=require("image-size"),plist=require("simple-plist"),isWin="win32"===process.platform,errorIOSSdkVersions=["1.0.19"],privateDescriptions=["NSPhotoLibraryUsageDescription","NSPhotoLibraryAddUsageDescription","NSCameraUsageDescription","NSMicrophoneUsageDescription","NSLocationWhenInUseUsageDescription","NSLocationAlwaysUsageDescription","NSLocationAlwaysAndWhenInUseUsageDescription","NSCalendarsUsageDescription","NSContactsUsageDescription","NSBluetoothPeripheralUsageDescription","NSBluetoothAlwaysUsageDescription","NSSpeechRecognitionUsageDescription","NSRemindersUsageDescription","NSMotionUsageDescription","NSHealthUpdateUsageDescription","NSHealthShareUsageDescription","NSAppleMusicUsageDescription","NFCReaderUsageDescription","NSHealthClinicalHealthRecordsShareUsageDescription","NSHomeKitUsageDescription","NSSiriUsageDescription","NSFaceIDUsageDescription","NSLocalNetworkUsageDescription","NSUserTrackingUsageDescription","NSLocationUsageDescription"],defaultIconDirPath=path_1.default.join(__dirname,"../../../static/images/"),iconInfoMap={appStore1024:{size:[1024,1024],scale:1,idiom:"ios-marketing",required:!0},mainIcon120:{size:[60,60],scale:2,idiom:"iphone",required:!0},mainIcon180:{size:[60,60],scale:3,idiom:"iphone"},spotlightIcon80:{size:[40,40],scale:2,idiom:"iphone"},spotlightIcon120:{size:[40,40],scale:3,idiom:"iphone"},settingsIcon58:{size:[29,29],scale:2,idiom:"iphone"},settingsIcon87:{size:[29,29],scale:3,idiom:"iphone"},notificationIcon40:{size:[20,20],scale:2,idiom:"iphone"},notificationIcon60:{size:[20,20],scale:3,idiom:"iphone"},ipadMainIcon152:{size:[76,76],scale:2,idiom:"ipad"},ipadMainIcon167:{size:[83.5,83.5],scale:2,idiom:"ipad"}},getDepReg=e=>new RegExp(`s.subspec '${e}'.*\n(?:.*\n)*?(?:.*sp.vendored_frameworks = \\[\n)((?:.*'.*?'.*\n)*?)(?:.*\\]\n)`,"m");class IOSUtils{constructor(e,i={},t,n){this.root=e,this.userConfig=i,this.miniappDirPath=t,this.devtoolsVersion=n}getProjectConfig(){const e=projectConfigUtils.getProjectConfig(this.root,this.userConfig);if(!e)throw new Error("iOS project folder not found. Are you sure this is a miniapp project?");return e}getBundleId(e){return child_process.execFileSync("/usr/libexec/PlistBuddy",["-c","Print:CFBundleIdentifier",path_1.default.join(e,"Info.plist")],{encoding:"utf8",env:(0,env_1.getProcessEnv)()}).trim()}tryInstallPod(e,i){const t=this.getProjectConfig(),{sourceDir:n}=t,s={cwd:n,env:(0,env_1.getProcessEnv)()};i.progress("export LANG=en_US.UTF-8 && pod install"),child_process.execSync("export LANG=en_US.UTF-8 && pod install",s)}async runLocal(e,i){const t=this.getProjectConfig(),{sourceDir:n}=t;process.chdir(n),this.tryInstallPod(e,i);const s=path_1.default.basename(t.name,path_1.default.extname(t.name)),o=e.scheme||s;if(i.progress(`Found Xcode ${t.isWorkspace?"workspace":"project"} "${t.name}"`),e.device||e.udid){if(e.udid||e.device){const n=await deviceUtils.getDevices({recorder:i}),s=n.find(i=>i.udid===e.udid||i.name===e.device);if(!s)throw new Error(`Could not find a device with udid(${e.udid}) or device(${e.device}). ${deviceUtils.printFoundDevices(n)}`);if("simulator"===s.type)return void await this.runOnSimulatorLocal(t,o,e,i);await this.runOnDeviceLocal(t,o,s,i)}}else await this.runOnSimulatorLocal(t,o,e,i)}async runCloud(e,i){try{const{deviceType:t,udid:n,projectPath:s,demoIpaPath:o,sdkPath:a,bindingInfo:r,certificateInfo:c,arch:p="arm64"}=e,d="simulator"===t,l=(0,miniappJson_1.tryGetIOSMiniappJson)(s);let u=r;if(c.signType===miniapp_builder_1.miniappSinTypes.appleId.type){const{mobileapp_info:e={}}=u;u=Object.assign(Object.assign({},u),{mobileapp_info:Object.assign(Object.assign({},e),{bundle_id:miniapp_builder_1.DEFAULT_BUNDLE_ID,debug_ios_bundle_id:miniapp_builder_1.DEFAULT_BUNDLE_ID})})}const f=await this.updateIOSInfoPlistInfo(s,u,o,l,i);await this.updateIOSAppConfigPlistInfo(s,u,o,l,a,d,i),await this.updateIOSAppexInfoPlistInfo(u,o,l,f,i),await this.updateIOSIcons(s,o,"",l,!1,i),await this.updateSplashScreen(s,o,l,!1,i),await this.updateExtendedSdk(o,a,p,l,i);const h=await this.getEntitlements(u,o,l,i);if("device"===t){const{mobileapp_info:e={}}=u,t=e.ios_flag&&e.bundle_id||e.debug_ios_bundle_id;await(0,miniapp_builder_1.signAndInstallOrExport)(s,o,c,{bundleId:t,install:!0,deviceId:n,entitlements:h},{recorder:i,miniappDirPath:this.miniappDirPath,devtoolsVersion:this.devtoolsVersion})}else await this.runOnSimulatorCloud(o,{udid:n},i)}catch(e){throw new Error("Run the app failed："+e.message)}}async buildLocal(e,i){const t=this.getProjectConfig();process.chdir(t.sourceDir);const n=path_1.default.basename(t.name,path_1.default.extname(t.name)),s=e.scheme||n;this.tryInstallPod(e,i),i.progress("start build ipa...");const o=await this.buildProjectArchive(t,{output:e.output,scheme:s},i),a=await this.exportArchive(t,o,e,i);return console.log("Successfully build ipa: "+a),a}async buildCloud(e,i){try{const{projectPath:t,demoIpaPath:n,sdkPath:s,arch:o="arm64",bindingInfo:a,certificateInfo:r,output:c,miniappCacheDirPath:p}=e,{selfCertificate:d={}}=r,l=(null==d?void 0:d.isPublish)||!1,u=(0,miniappJson_1.tryGetIOSMiniappJson)(t);if(errorIOSSdkVersions.includes(u.sdkVersion))throw new Error("当前 mini-ios.sdkVersion 存在缺陷，请参考更新日志进行修改");let f=a;if(r.signType===miniapp_builder_1.miniappSinTypes.appleId.type){const{mobileapp_info:e={}}=f;f=Object.assign(Object.assign({},f),{mobileapp_info:Object.assign(Object.assign({},e),{bundle_id:miniapp_builder_1.DEFAULT_BUNDLE_ID,debug_ios_bundle_id:miniapp_builder_1.DEFAULT_BUNDLE_ID})})}const h=await this.updateIOSInfoPlistInfo(t,f,n,u,i);await this.updateIOSAppConfigPlistInfo(t,f,n,u,s,!1,i),await this.updateIOSAppexInfoPlistInfo(f,n,u,h,i),await this.updateIOSIcons(t,n,p,u,l,i),await this.updateSplashScreen(t,n,u,l,i),await this.updateExtendedSdk(n,s,o,u,i);const _=await this.getEntitlements(f,n,u,i),{mobileapp_info:g={}}=f;let m;m=r.signType===miniapp_builder_1.miniappSinTypes.appleId.type?miniapp_builder_1.DEFAULT_BUNDLE_ID:g.ios_flag&&g.bundle_id||g.debug_ios_bundle_id;const y={bundleId:m,output:c,entitlements:_},S={recorder:i,miniappDirPath:this.miniappDirPath,devtoolsVersion:this.devtoolsVersion};if(d.isPublish){const e=await(0,miniapp_builder_1.codesignAndExport)(t,n,y,S,this.useTpush(u));if(!0!==e.success)throw new Error("Build ipa failed："+(e.errMsg||"codesignAndExport failed"))}else await(0,miniapp_builder_1.signAndInstallOrExport)(t,n,r,y,S)}catch(e){throw new Error("Build ipa failed："+e.message)}}launchSimulator(e,i){let t;try{t=JSON.parse(child_process.execFileSync("xcrun",["simctl","list","--json","devices"],{encoding:"utf8",env:(0,env_1.getProcessEnv)()}))}catch(e){throw new Error("Could not get the simulator list from Xcode. Please open Xcode and try running project directly from there to resolve the remaining issues."+e.message)}const n=["iPhone 13","iPhone 12","iPhone 11"].reduce((e,i)=>e||deviceUtils.findMatchingSimulator(t,{device:i}),deviceUtils.findMatchingSimulator(t,e));if(!n)throw new Error("No simulator available with "+(e.device?`name "${e.device}"`:`udid "${e.udid}"`));const s=child_process.execFileSync("xcode-select",["-p"],{encoding:"utf8",env:(0,env_1.getProcessEnv)()}).trim();if(child_process.execFileSync("open",[s+"/Applications/Simulator.app","--args","-CurrentDeviceUDID",n.udid],{env:(0,env_1.getProcessEnv)()}),!n.booted){const e=deviceUtils.formattedDeviceName(n);i.progress("Launching "+e),child_process.spawnSync("xcrun",["simctl","boot",n.udid],{env:(0,env_1.getProcessEnv)()})}return n}async runOnSimulatorCloud(e,i,t){const{udid:n}=i,s=this.launchSimulator({udid:n},t);await this.installAppOnSimulator(s,e,t),await this.launchAppOnSimulator(s,e,t)}async runOnSimulatorLocal(e,i,t,n){const s=this.launchSimulator(t,n),{appPath:o}=await this.buildProjectApp(e,{udid:s.udid,scheme:i},n);await this.installAppOnSimulator(s,o,n),await this.launchAppOnSimulator(s,o,n)}async runOnDeviceLocal(e,i,t,n){const{appPath:s}=await this.buildProjectApp(e,{udid:t.udid,scheme:i},n);if("catalyst"===t.type){child_process.spawn(`${s}/${i}`,[],{detached:!0,stdio:"ignore",env:(0,env_1.getProcessEnv)()}).unref()}else{const e=["--bundle",s,"--id",t.udid,"--justlaunch"];n.progress("Installing and launching your app on "+t.name);const i=path_1.default.join(__dirname,"../../../vendor/ios-deploy/ios-deploy");await(0,cp_1.spawnSync)(i,e,{},n)}return n.progress("Install successfully the app to the device.")}buildProjectApp(e,i,t){return new Promise((n,s)=>{const{scheme:o,udid:a}=i,r=[e.isWorkspace?"-workspace":"-project",e.name,"-scheme",o];let c;a&&r.push("-destination","id="+a),t.progress(`Building (using "xcodebuild ${r.join(" ")}")`),this.xcbeautifyAvailable()?c=child_process.spawn("xcbeautify",[],{stdio:["pipe",process.stdout,process.stderr],env:(0,env_1.getProcessEnv)()}):this.xcprettyAvailable()&&(c=child_process.spawn("xcpretty",[],{stdio:["pipe",process.stdout,process.stderr],env:(0,env_1.getProcessEnv)()}));const p=child_process.spawn("xcodebuild",r,{env:(0,env_1.getProcessEnv)()});let d="",l="";p.stdout.on("data",e=>{const i=e.toString();t.progress(i),d+=i,c&&c.stdin.write(e)}),p.stderr.on("data",e=>{const i=e.toString();l+=i,t.progress(i)}),p.on("close",i=>{if(c&&c.stdin.end(),0!==i)return void s(new Error(` Failed to build iOS project.\n              We ran "xcodebuild" command but it exited with error code ${i}. To debug build\n              logs further, consider building your app with Xcode.app, by opening\n              ${e.name}.\n              ${c?void 0:`${d}\n${l}`}\n            `));let a;try{a=this.getBuildInfo(e,d,o)}catch(e){s(e)}t.progress("Successfully built the app"),n(a)})})}async installAppOnSimulator(e,i,t){const n=["simctl","install",e.udid,i];await(0,cp_1.spawnSync)("xcrun",n,{},t)}async launchAppOnSimulator(e,i,t){const n=this.getBundleId(i),s=["simctl","launch",e.udid,n];await(0,cp_1.spawnSync)("xcrun",s,{},t),t.progress("Successfully launched the app on the simulator")}async buildProjectArchive(e,i,t){const{output:n,scheme:s,udid:o}=i,a=path_1.default.join(n,"./app"),{sourceDir:r}=e;fs_extra_1.default.ensureDirSync(path_1.default.dirname(a));const c=["archive",e.isWorkspace?"-workspace":"-project",e.name,"-scheme",s,"-archivePath",a];o&&c.push("-destination","id="+o);try{if(await(0,cp_1.spawnSync)("xcodebuild",c,{cwd:r},t),!fs_extra_1.default.existsSync(a+".xcarchive"))throw new Error(`Failed to build iOS project.\n          ${a+".xcarchive"} does not found\n        `);return t.progress(`Successfully archive the app: ${a}.xcarchive`),a+".xcarchive"}catch(i){throw new Error(`Failed to build iOS project. To debug build\n        logs further, consider building your app with Xcode.app, by opening\n        ${e.name}.\n      `)}}async exportArchive(e,i,t,n){const s=path_1.default.join(t.output,"ipa");fs_extra_1.default.ensureDirSync(s),fs_extra_1.default.emptyDirSync(s);const{exportOptionPlistPath:o}=t;if(!o)throw new Error("build ios ipa require exportOptionPlistPath in project.miniapp.json");let a="";a=path_1.default.isAbsolute(o)?o:path_1.default.join(t.projectPath,o);const r=["-exportArchive","-archivePath",i,"-exportOptionsPlist",a,"-exportPath",s];try{await(0,cp_1.spawnSync)("xcodebuild",r,{cwd:e.sourceDir},n)}catch(i){throw new Error(`To debug build\n            logs further, consider building your app with Xcode.app, by opening\n            ${e.name}.\n          `)}return fs_extra_1.default.removeSync(i),s}getTargetPaths(e){const i=JSON.parse(e);for(const e in i){if("app"===i[e].buildSettings.WRAPPER_EXTENSION)return{targetBuildDir:i[e].buildSettings.TARGET_BUILD_DIR,executableFolderPath:i[e].buildSettings.EXECUTABLE_FOLDER_PATH}}return{}}getBuildInfo(e,i,t){const n=this.getPlatformName(i),s=[e.isWorkspace?"-workspace":"-project",e.name,"-scheme",t,"-sdk",n,"-showBuildSettings","-json"].join(" "),o=child_process.execSync("xcodebuild "+s,{encoding:"utf8",cwd:e.sourceDir,env:(0,env_1.getProcessEnv)()}),a=this.getBuildProductDir(i),{executableFolderPath:r}=this.getTargetPaths(o);if(!r)throw new Error("Failed to get the app name.");return{sdk:n,appPath:`${a}/${r}`}}getPlatformName(e){const i=/export PLATFORM_NAME\\?="?(\w+)"?$/m.exec(e);if(!i)throw new Error("Couldn't find PLATFORM_NAME in xcodebuild output.");return i[1]}getBuildProductDir(e){const i=/export BUILT_PRODUCTS_DIR\\?="?(.+)"?$/m.exec(e);if(!i)throw new Error("Couldn't find BUILT_PRODUCTS_DIR in xcodebuild output.");return i[1]}xcbeautifyAvailable(){try{child_process.execSync("xcbeautify --version",{stdio:[0,"pipe","ignore"],env:(0,env_1.getProcessEnv)()})}catch(e){return!1}return!0}xcprettyAvailable(){try{child_process.execSync("xcpretty --version",{stdio:[0,"pipe","ignore"],env:(0,env_1.getProcessEnv)()})}catch(e){return!1}return!0}async updateIOSInfoPlistInfo(e,i,t,n,s){var o,a,r,c,p,d;s.progress("update app base info...");const{mobileapp_info:l={}}=i,u=l.mobileapp_id,f=path_1.default.join(t,"Info.plist"),h=plist.readFileSync(f);if(h.CFBundleName=n.name,h.CFBundleDisplayName=n.name,h.CFBundleShortVersionString=n.version,"number"==typeof n.versionCode?h.CFBundleVersion=parseInt(n.versionCode.toString(),10).toString():h.CFBundleVersion=(parseInt(h.CFBundleVersion,10)+1).toString(),h.CFBundleIdentifier=l.ios_flag&&l.bundle_id||l.debug_ios_bundle_id,Array.isArray(h.CFBundleURLTypes)||(h.CFBundleURLTypes=[]),(null===(a=null===(o=h.CFBundleURLTypes)||void 0===o?void 0:o[0])||void 0===a?void 0:a.CFBundleURLSchemes)&&(h.CFBundleURLTypes[0].CFBundleURLSchemes=[u]),h.CFBundleURLTypes[0]&&(h.CFBundleURLTypes=[h.CFBundleURLTypes[0]]),privateDescriptions.forEach(e=>{var i,t;(null===(i=null==n?void 0:n.privateDescriptions)||void 0===i?void 0:i[e])?h[e]=null===(t=n.privateDescriptions)||void 0===t?void 0:t[e]:delete h[e]}),!0===(null===(r=null==n?void 0:n.infoPlist)||void 0===r?void 0:r.DisableAppUsesNonExemptEncryption)?h.ITSAppUsesNonExemptEncryption=!1:delete h.ITSAppUsesNonExemptEncryption,h.UIBackgroundModes=[],!0===(null===(c=null==n?void 0:n.infoPlist)||void 0===c?void 0:c.AudioInBackgroundMode)&&h.UIBackgroundModes.push("audio"),!0===(null===(p=null==n?void 0:n.infoPlist)||void 0===p?void 0:p.LocationInBackgroundMode)&&h.UIBackgroundModes.push("location"),"object"==typeof(null===(d=null==n?void 0:n.infoPlist)||void 0===d?void 0:d.CFBundleURLTypes)){const e=this.generateInfoPlistCFBundleURLTypesItem(n.infoPlist.CFBundleURLTypes);h.CFBundleURLTypes.push(e);const{additionalCFBundleURLTypes:i}=n.infoPlist.CFBundleURLTypes;Array.isArray(i)&&i.forEach(e=>{if("object"==typeof e){const i=this.generateInfoPlistCFBundleURLTypesItem(e);h.CFBundleURLTypes.push(i)}})}return plist.writeFileSync(f,h),h.CFBundleVersion}generateInfoPlistCFBundleURLTypesItem(e){const i={};return e.CFBundleURLName&&(i.CFBundleURLName=e.CFBundleURLName),e.CFBundleURLSchemes&&(i.CFBundleURLSchemes=[e.CFBundleURLSchemes]),e.CFBundleTypeRole&&(i.CFBundleTypeRole=e.CFBundleTypeRole),i}async updateIOSAppexInfoPlistInfo(e,i,t,n,s){if(this.useTpush(t)){s.progress("update appex for notification base info...");const{mobileapp_info:o={}}=e,a=path_1.default.join(i,"PlugIns/TPNSService.appex"),r=path_1.default.join(a,"Info.plist"),c=plist.readFileSync(r);c.CFBundleShortVersionString=t.version,s.progress("update appex for CFBundleVersion: "+n),c.CFBundleVersion=n;const p=o.ios_flag&&o.bundle_id||o.debug_ios_bundle_id;c.CFBundleIdentifier=t.tpush.serviceBundleId||p+".service",s.progress("update appex bundle identifier for infoPlist : "+c.CFBundleIdentifier),plist.writeFileSync(r,c)}else s.progress("not using tpush...")}useTpush(e){return(0,miniappJson_1.iOSMiniAppJsonIsUsingTpush)(e)}useGDT(e){return(0,miniappJson_1.iOSMiniAppJsonIsUsingGDT)(e)}async updateIOSAppConfigPlistInfo(e,i,t,n,s,o,a){var r;a.progress("update app module info...");const{module_info:c={},cpa_info:p={}}=i;if(!p.sdk_key||!p.sdk_key_secret)throw new Error("sdkKey and sdkSecret not found");const d=path_1.default.join(t,"MiniApp.bundle"),l=path_1.default.join(d,"AppConfig.plist"),u=plist.readFileSync(l);u.miniModuleId=c.module_id,u.sdkKey=p.sdk_key,u.sdkSecret=p.sdk_key_secret;const{privacy:f={}}=n;u.privacy||(u.privacy={}),u.privacy.enable=!!f.enable;const h=path_1.default.posix.join(d,"configs/privacy.json");let{template:_,contentViewImage:g,cancelButtonImage:m,confirmButtonImage:y}=f;f.enable?_?(path_1.default.isAbsolute(_)||(_=path_1.default.resolve(e,_)),fs_extra_1.default.ensureDirSync(path_1.default.posix.join(d,"configs")),fs_extra_1.default.copyFileSync(_,h),u.privacy.template="configs/privacy.json"):u.privacy.template="configs/defaultPrivacy.json":(u.privacy.template="",fs_extra_1.default.removeSync(h)),this.updatePrivacyBackgroundImage(e,t,a,"contentViewImage",g),this.updatePrivacyBackgroundImage(e,t,a,"confirmButtonImage",y),this.updatePrivacyBackgroundImage(e,t,a,"cancelButtonImage",m);const{appMenuEnable:S=!0}=n;u.appMenuEnable=S;const{enableVConsole:v="undefined"}=n;u.enableVConsole=v;const{tpush:I}=n;let b=!1;if("object"==typeof I){const e=path_1.default.posix.join(t,"PlugIns/TPNSService.appex"),i=path_1.default.posix.join(e,"AppConfig.plist");if(this.useTpush(n)){u.TPNSAccessID=I.accessID,u.TPNSAccessKey=I.accessKey,I.clusterDomainName?u.clusterDomainName=I.clusterDomainName:delete u.clusterDomainName;const t=o?"x86_64":"arm64",n=path_1.default.join(s,`appex/${t}/TPNSService.appex`);if(!fs_extra_1.default.existsSync(n))throw new Error("can not found extendsdk: "+n);try{fs_extra_1.default.copySync(n,e),plist.writeFileSync(i,u),b=!0}catch(e){throw new Error("copy TPNSService.appex to app failed: "+e)}}}if(!b)try{const e=path_1.default.posix.join(t,"PlugIns");fs_extra_1.default.existsSync(e)?(fs_extra_1.default.removeSync(e),a.progress("removed PlugIns folder...")):a.progress("no PlugIns folder...")}catch(e){throw new Error("remove TPNSService.appex from app failed: "+e)}if(null===(r=n.useExtendedSdk)||void 0===r?void 0:r.WeAppLBS){if(!n.qmapAPIKey)throw new Error("You need to provide the Tencent Location Service API Key when using LBS SDK.");u.qmapAPIKey=n.qmapAPIKey}const{gdt:x}=n,w=this.useGDT(n);u.GDTAd=w?{appid:x.appid,enable:!0,SplashAd:{placementId:x.splashAd_placementId,fetchDelay:x.splashAd_fetchDelay||3}}:{appid:"",enable:!1,SplashAd:{placementId:"",fetchDelay:3}};const{enableDebugLog:P=!1}=n;u.enableDebugLog=P,plist.writeFileSync(l,u)}updatePrivacyBackgroundImage(e,i,t,n,s){t.message("doing","updatePrivacyBackgroundImage "+n);if(fs_extra_1.default.readdirSync(i).forEach(e=>{"privacy_"+n===path_1.default.basename(e,path_1.default.extname(e))&&fs_extra_1.default.removeSync(path_1.default.join(i,e))}),!s)return;path_1.default.isAbsolute(s)||(s=path_1.default.join(e,s));const o=path_1.default.extname(s),a=path_1.default.join(i,`privacy_${n}${o}`);try{fs_extra_1.default.copyFileSync(s,a)}catch(e){throw t.message("fail",`copy privacy image failed: ${n}, ${s} to ${a}`),e}}updateBundleIcons(e,i,t,n,s){const o=[],a=[],r=[];for(const c in t){if(!t[c])continue;let p=t[c];path_1.default.isAbsolute(p)||(p=path_1.default.join(e,t[c]));const d=iconInfoMap[c];try{const e=sizeOf(p),i=d.size[0]*d.scale,n=d.size[1]*d.scale;if(e.width!==i||e.height!==n){s.progress(`check ${c} size failed, require [${i}, ${n}] but [${e.width}, ${e.height}] ingore ${t[c]} `);continue}}catch(e){s.progress(`get ${c} info failed, ingore ${t[c]}（e: ${e.message}）`);continue}const l=path_1.default.extname(p),u=1===d.scale?"":`@${d.scale}x`,f=`${d.size[0]}x${d.size[1]}`,h=c.startsWith("ipad"),_="appStore1024"===c,g=n,m=path_1.default.join(i,`${g}${f}${u}${h?"~ipad":""}${l}`),y={from:p,to:m,filename:path_1.default.basename(m),size:f,scale:d.scale+"x",idiom:d.idiom,key:c};o.push(y),_||(h?r.includes(`${g}${f}`)||r.push(`${g}${f}${u}`):a.includes(`${g}${f}`)||a.push(`${g}${f}${u}`))}return{iphoneBundleIconFiles:a,ipadBundleIconFiles:r,addFiles:o}}async updateIOSIcons(e,i,t,n,s,o){o.progress("update app icons...");const{icons:a={}}=n,r=s&&!isWin&&!!t;o.progress("genAssetCar: "+r);const c=glob_1.default.sync("AppIcon*.+(png|jpg|jpeg|webp)",{nodir:!0,cwd:i}).map(e=>path_1.default.join(i,e)),p="AppIcon-"+uuidv4().slice(0,8),{iphoneBundleIconFiles:d=[],ipadBundleIconFiles:l=[],addFiles:u=[]}=this.updateBundleIcons(e,i,a,p,o),f={};for(const e in iconInfoMap){if(!iconInfoMap[e].required||a[e])continue;const i=iconInfoMap[e].size[0]*iconInfoMap[e].scale,t=iconInfoMap[e].size[1]*iconInfoMap[e].scale;if(f[e]=path_1.default.join(defaultIconDirPath,`donut-icon${i}x${t}.png`),o.progress(`using default app icons when ${e} is not config...`),!fs_extra_1.default.existsSync(f[e]))throw new Error(`required ${e} but not default or set`)}const{iphoneBundleIconFiles:h,ipadBundleIconFiles:_,addFiles:g}=this.updateBundleIcons(e,i,f,p,o);if(d.push(...h),l.push(..._),u.push(...g),!d.length&&!l.length)return;c.forEach(e=>{fs_extra_1.default.existsSync(e)&&fs_extra_1.default.removeSync(e)});const m=path_1.default.join(t,"__assetCarOperateDir/assetsCar/"),y=path_1.default.join(m,`Assets.xcassets/${p}.appiconset/`);r&&(fs_extra_1.default.ensureDirSync(y),fs_extra_1.default.emptyDirSync(y));const S=[];if(u.forEach(e=>{fs_extra_1.default.existsSync(e.to)&&fs_extra_1.default.removeSync(e.to),fs_extra_1.default.copyFileSync(e.from,e.to),r&&(fs_extra_1.default.copySync(e.from,path_1.default.join(y,e.filename)),S.push({filename:e.filename,size:e.size,scale:e.scale,idiom:e.idiom}))}),r&&fs_extra_1.default.writeJsonSync(path_1.default.join(y,"Contents.json"),{images:S,info:{author:"xcode",version:1}},{spaces:"\t"}),r){const e=path_1.default.join(__dirname,"../../../static/scripts/assetsCar/"),t=path_1.default.join(m,"createAssetsCar");fs_extra_1.default.copySync(e,m);try{await(0,miniapp_builder_1.checkXcodeEnv)(o),child_process.execSync(`"${t}" ${p}`,{env:(0,env_1.getProcessEnv)()})}catch(e){o.progress("createAssetsCar failed "+(e.message||""))}const n=path_1.default.join(m,"build/Assets.car"),s=path_1.default.join(i,"Assets.car");fs_extra_1.default.copyFileSync(n,s)}else{const e=path_1.default.join(i,"Assets.car");fs_extra_1.default.removeSync(e)}const v=path_1.default.join(i,"Info.plist"),I=plist.readFileSync(v);I.CFBundleIcons||(I.CFBundleIcons={CFBundlePrimaryIcon:{}}),I.CFBundleIcons.CFBundlePrimaryIcon.CFBundleIconName=p,I.CFBundleIcons.CFBundlePrimaryIcon.CFBundleIconFiles=d,I["CFBundleIcons~ipad"]||(I["CFBundleIcons~ipad"]={CFBundlePrimaryIcon:{}}),I["CFBundleIcons~ipad"].CFBundlePrimaryIcon.CFBundleIconName=p,I["CFBundleIcons~ipad"].CFBundlePrimaryIcon.CFBundleIconFiles=l,I.NSAppTransportSecurity={NSAllowsArbitraryLoads:!0},plist.writeFileSync(v,I)}async updateSplashScreen(e,i,t,n,s){s.progress("update splashscreen image...");const{splashscreen:o={}}=t;if(o.customImage){if(!o.customImage.endsWith(".png"))return void s.progress("LaunchScreen require png image, but get "+o.customImage);let t=o.customImage;path_1.default.isAbsolute(t)||(t=path_1.default.join(e,o.customImage));const n=path_1.default.join(i,"Info.plist"),a=plist.readFileSync(n),r=a.UISplashScreenImageName+".png";glob_1.default.sync("LaunchScreen-*.+(png|jpg|jpeg|webp)",{nodir:!0,cwd:i}).forEach(e=>{const t=path_1.default.join(i,e);fs_extra_1.default.removeSync(t)});const c="LaunchScreen-"+uuidv4().slice(0,12),p=c+".png",d=path_1.default.join(i,p);fs_extra_1.default.copyFileSync(t,d),a.UISplashScreenImageName=c,plist.writeFileSync(n,a);const l=path_1.default.join(i,"/Base.lproj/LaunchScreen.storyboardc/01J-lp-oVM-view-Ze5-6b-2t3.nib"),u=fs_extra_1.default.readFileSync(l).toString("hex"),f=Buffer.from(r,"utf-8").toString("hex"),h=Buffer.from(p,"utf-8").toString("hex");if(-1!==u.indexOf(f)){const e=u.replace(f,h),i=Buffer.from(e,"hex");fs_extra_1.default.writeFileSync(l,i),console.log("resplace storyboard success")}else console.log("resplace storyboard fail")}return!1}genUseExtendedSdk(e){const i=Object.assign({},e.useExtendedSdk||{});for(const t in e)if("object"==typeof e[t])for(const n in e[t])if(n.startsWith("useExtendedLib_WeApp")&&!0===e[t][n]){i[n.slice("useExtendedLib_".length)]=!0}return!i.WeAppLBS||i.WeAppOpenFuns||i.WeAppOpenFuns_HasPay||(i.WeAppOpenFuns=!0),i}async updateExtendedSdk(e,i,t,n,s){const o=path_1.default.join(e,"Frameworks");fs_extra_1.default.ensureDirSync(o),fs_extra_1.default.emptyDirSync(o),s.progress("update extendsdk...");const a=path_1.default.join(i,"WeAppSDK.podspec"),r=fs_extra_1.default.readFileSync(a,"utf-8"),c=this.genUseExtendedSdk(n);if(s.progress("useExtendedSdks: "+JSON.stringify(c)),c.WeAppOpenFuns&&c.WeAppOpenFuns_HasPay)throw new Error("OpenFuncs SDK 只可勾选使用一个，请按需勾选使用");const p={};for(const e in c){if(!c[e])continue;const n=getDepReg(e),s=r.match(n);if(!(null==s?void 0:s[1]))throw new Error("can not match extendsdk in podspec file: "+e);const a=[];if(s[1].split("\n").forEach(e=>{const n=e.match(/.*'(.*?)',/);if(null==n?void 0:n[1]){const e=n[1].split("/").pop(),s=path_1.default.join(i,"Libs",t,e);if(!fs_extra_1.default.existsSync(s))throw new Error("can not found extendsdk: "+e);const r=path_1.default.join(o,e);fs_extra_1.default.copySync(s,r),a.push(path_1.default.basename(e))}}),a.length){p[a.shift()]=a}}const d=path_1.default.join(e,"DyFrameworks.plist");fs_extra_1.default.existsSync(d)&&fs_extra_1.default.removeSync(d),plist.writeFileSync(d,p)}async getEntitlements(e,i,t,n){const{mobileapp_info:s={}}=e;let o=s.ios_universal_link||s.debug_ios_universal_link;return(o.startsWith("https://")||o.startsWith("http://"))&&(o=o.replace(/^http(s)?:\/\//g,"applinks:")),{"com.apple.developer.associated-domains":o}}}exports.IOSUtils=IOSUtils;
}(require("licia/lazyImport")(require), require)