!function(require, directRequire){
"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.NativeCompiler=void 0;const define_1=require("../../config/define"),tools_1=require("../../utils/tools"),android_1=require("./android"),ios_1=require("./ios");class NativeCompiler{constructor(e){this.projectPath=e.projectInfo.projectPath}getHandler(e){let t=null;const i=(0,tools_1.getMiniappJson)(this.projectPath,e);return e===define_1.PLATFORM["mini-android"]?t=new android_1.AndroidUtils(i.projectPath,i.project):e===define_1.PLATFORM["mini-ios"]&&(t=new ios_1.IOSUtils(i.projectPath,i.project)),t}validNativePlatform(e){return e===define_1.PLATFORM["mini-android"]||e===define_1.PLATFORM["mini-ios"]}async getAndroidDevices(){return this.getHandler(define_1.PLATFORM["mini-android"]).getDevices()}async getIOSDevices(){return this.getHandler(define_1.PLATFORM["mini-ios"]).getDevices()}async run(e,t){const{targetPlatform:i,opts:r}=e;if(!this.validNativePlatform(i))return;const o=(0,tools_1.getMiniappJson)(this.projectPath,i).runArgs||{},n=this.getHandler(i);return await n.run(Object.assign(Object.assign({},o),r),t)}async build(e,t){const{targetPlatform:i,opts:r={}}=e;if(!this.validNativePlatform(i))return;const o=this.getHandler(i),n=(0,tools_1.getMiniappJson)(this.projectPath,i).buildArgs||{};return await o.build(Object.assign(Object.assign({projectPath:this.projectPath},n),r),t)}}exports.NativeCompiler=NativeCompiler;
}(require("licia/lazyImport")(require), require)