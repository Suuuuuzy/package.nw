var _a,_b;process.env&&process.env.isDevtools&&require("../../utils/hackrequire/index"),Object.defineProperty(exports,"__esModule",{value:!0}),(null===(_a=process.env)||void 0===_a?void 0:_a.isDevtools)&&require("../../utils/hackrequire/index");const entryProcess_1=require("../../utils/subprocess/entryProcess"),progressRecorder_1=require("../../utils/progressRecorder"),nativeCompiler_1=require("./nativeCompiler");let nativeCompiler;async function initHandler(e){const{projectInfo:r,passData:s}=e.data,{miniappDirPath:i,devtoolsVersion:n}=s;nativeCompiler=new nativeCompiler_1.NativeCompiler({projectInfo:r,miniappDirPath:i,devtoolsVersion:n})}async function messageHandler(e){if(e.type,"request"===e.type){const{id:r,name:s,data:i}=e,n=r,t=new progressRecorder_1.Recorder((e,r,s)=>{process.send({type:"progress",id:e,taskId:n,status:r,message:s})});i.fullEnv&&(global.fullEnv=i.fullEnv);try{let e;const a=`${s}-${n}`;if("buildNative"===s)e=await t.run(a,async()=>await nativeCompiler.build(i,t));else{if("runNative"!==s)throw new Error("unknown command "+s);e=await t.run(a,async()=>await nativeCompiler.run(i,t))}process.send({type:"response",id:r,data:e})}catch(e){process.send({type:"response",id:r,data:null,error:{code:e.code||-1,message:e.message,stack:e.stack,path:e.path||""}})}}}(0,entryProcess_1.runSubProcess)({initHandler:initHandler,messageHandler:messageHandler,timeout:(null===(_b=process.env)||void 0===_b?void 0:_b.timeout)||3e5});