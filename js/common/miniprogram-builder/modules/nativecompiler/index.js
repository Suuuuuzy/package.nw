!function(require, directRequire){
"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.NativeCompiler=void 0;const tslib_1=require("tslib"),path_1=tslib_1.__importDefault(require("path")),define_1=require("../../config/define"),processManager_1=require("../../utils/subprocess/processManager"),messageHub_1=require("../../utils/messageHub"),waitable_1=tslib_1.__importDefault(require("../../utils/waitable"));class NativeCompiler extends waitable_1.default{constructor(e){super(),this.initedPromise=null,this.onProgressUpdate=(e,s,t)=>{const i="doing"===s?"doing":"done"===s?"success":"error";this.messageHub.showBuildLog(""+e,i,t)},this.messageHub=new messageHub_1.MessageHub(e.devtoolMessagehub),this.project=e.project}async ready(){await this.wait(this.init.bind(this))}async init(){return this.initedPromise||(this.initedPromise=(async()=>{await this.createSubProcessManager()})()),this.initedPromise}async createSubProcessManager(){const e=path_1.default.posix.join(__dirname,"./nativeEntryProcess.js");this.subProcessManager=new processManager_1.SubProcessProxy(this.project,e),await this.subProcessManager.init({})}async runAndroid(e){const s=define_1.PLATFORM["mini-android"];return await this.subProcessManager.runTask("runNative",{targetPlatform:s,opts:e,fullEnv:global.fullEnv},this.onProgressUpdate)}async runIOS(e){const s=define_1.PLATFORM["mini-ios"];return await this.subProcessManager.runTask("runNative",{targetPlatform:s,opts:e,fullEnv:global.fullEnv},this.onProgressUpdate)}async buildAndroidAPK(e){const s=define_1.PLATFORM["mini-android"];return await this.subProcessManager.runTask("buildNative",{targetPlatform:s,opts:e,fullEnv:global.fullEnv},this.onProgressUpdate)}async buildIOSIPA(e){const s=define_1.PLATFORM["mini-ios"];return await this.subProcessManager.runTask("buildNative",{targetPlatform:s,opts:e,fullEnv:global.fullEnv},this.onProgressUpdate)}}exports.NativeCompiler=NativeCompiler;
}(require("licia/lazyImport")(require), require)