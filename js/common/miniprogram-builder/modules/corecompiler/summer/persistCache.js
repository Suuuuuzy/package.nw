!function(require, directRequire){
"use strict";Object.defineProperty(exports,"__esModule",{value:!0});const tslib_1=require("tslib"),path_1=tslib_1.__importDefault(require("path")),fs=tslib_1.__importStar(require("fs-extra")),tools_1=require("../../../utils/tools");class PersistCache{constructor(e,t){this.project=e,this.cachePath=t}getFilePath(e){const t=(0,tools_1.generateMD5)(e);return{cacheFile:path_1.default.join(this.cachePath,t),infoFile:path_1.default.join(this.cachePath,t+".json")}}async get(e){const{cacheFile:t,infoFile:s}=this.getFilePath(e);try{const e=await fs.readFile(s,"utf8"),a=JSON.parse(e);return{data:await fs.readFile(t,{encoding:a.encoding||null}),info:a}}catch(e){}return{}}async set(e,t){var s;const{cacheFile:a,infoFile:i}=this.getFilePath(e);try{const e=(null===(s=t.info)||void 0===s?void 0:s.encoding)||null;await fs.writeFile(a,t.data,e),await fs.writeFile(i,JSON.stringify(t.info),"utf8")}catch(e){}}async remove(e){const{cacheFile:t,infoFile:s}=this.getFilePath(e);try{await fs.unlink(t),await fs.unlink(s)}catch(e){}}async clean(){const e=fs.readdirSync(this.cachePath);await Promise.all(e.map(async e=>{try{await fs.unlink(path_1.default.join(this.cachePath,e))}catch(e){}}))}}class FakePersistCache{async get(e){return{}}async set(e,t){}async remove(e){}async clean(){}}class LogicPersistCache{constructor(e,t,s){this.baseCacheKey=s,this.project=e,this.persistCache=t?new PersistCache(this.project,t):new FakePersistCache}updateBaseCacheKey(e){this.baseCacheKey!==e&&(this.persistCache.clean(),this.baseCacheKey=e)}getCacheKey(e){return`${e.independentRoot}|${e.source}`}async get(e,t,s){var a,i;const c=path_1.default.posix.join(e,t,s.path),n=path_1.default.posix.join(e,t,s.source),h=await this.persistCache.get(c);if((null===(a=h.info)||void 0===a?void 0:a.baseCacheKey)===this.baseCacheKey){if(h.info&&h.info.cacheKey===this.getCacheKey(s)){const e=fs.statSync(n);if(h.info.mtimeMs===e.mtimeMs){(null===(i=process.env)||void 0===i?void 0:i.isDevtools)&&console.log("use cache",s.path);try{return JSON.parse(h.data)}catch(e){this.persistCache.remove(c)}}}}else this.persistCache.remove(c)}async set(e,t,s,a){const i=path_1.default.posix.join(e,t,s.path),c=path_1.default.posix.join(e,t,s.source),n=fs.statSync(c);this.persistCache.set(i,{info:{encoding:"utf8",cacheKey:this.getCacheKey(s),baseCacheKey:this.baseCacheKey,mtimeMs:n.mtimeMs},data:JSON.stringify(a)})}async clean(){this.persistCache.clean()}}exports.default=LogicPersistCache;
}(require("licia/lazyImport")(require), require)