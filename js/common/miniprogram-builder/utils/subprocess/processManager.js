!function(require, directRequire){
"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.SubProcessProxy=void 0;const tslib_1=require("tslib"),child_process_1=require("child_process"),path_1=tslib_1.__importDefault(require("path")),customError_1=require("../../utils/customError");function performanceMark(e,s){}class SubProcessProxy{constructor(e,s,t=""){this.project=e,this.entryPath=s,this.cachePath=t,this.taskMap=new Map,this.taskId=0,this.initedPromise=new Promise((e,s)=>{this.initedResolve=e,this.initedReject=s})}async init(e){this.process=this.forkProcess();const s=await this.project.serialize(),t={type:"init",data:{cachePath:this.cachePath,projectInfo:s,options:e}};performanceMark("process init"),this.sendSubProcessMessage(t),performanceMark("process init",!0),await this.initedPromise}destroy(){this.process.kill("SIGTERM")}sendSubProcessMessage(e){this.process.send(e)}forkProcess(){const e=this.entryPath,s={stdio:["pipe","pipe","pipe","ipc"],cwd:this.project.projectPath,env:Object.assign(Object.assign({},process.env),{cpprocessEnv:"childprocess",nativeProcess:"1"})};if(s.env.isDevtools=process.__nwjs&&"wechatwebdevtools"===nw.App.manifest.appname,s.env.isDevtools){let e=path_1.default.join(path_1.default.dirname(process.execPath),"node");"darwin"!==process.platform&&(e+=".exe"),s.execPath=e}performanceMark("fork process");const t=(0,child_process_1.fork)(e,["--expose-gc"],s);return t.stdout.setEncoding("utf8"),t.stdout.on("data",e=>{}),t.stderr.on("data",e=>{console.error("child process stderr: "+e)}),t.on("exit",e=>{var s;(null===(s=process.env)||void 0===s?void 0:s.isDevtools)&&console.error(`child process exit: code(${e})`),0!==e&&this.initedReject(new Error(`native child process exit: code(${e})`))}),t.on("message",this.onChildSummerProcessMessage.bind(this)),t.unref(),t}onChildSummerProcessMessage(e){if("ready"===e.type)return performanceMark("process ready"),void this.initedResolve(!0);if("progress"===e.type){const s=this.taskMap.get(e.taskId);(null==s?void 0:s.progressUpdate)&&s.progressUpdate(e.id,e.status,e.message)}else if("response"===e.type){const{id:s,data:t,error:r}=e;r?this.onResponse(s,void 0,r):this.onResponse(s,t,void 0)}}onResponse(e,s,t){const r=this.taskMap.get(e);this.taskMap.delete(e),r?t?(t=new customError_1.CustomError(t),r.reject(t)):r.resolve(s):console.error(`child process task: ${e} not found`)}async sendEvent(e,s){await this.initedPromise,this.sendSubProcessMessage({type:"event",name:e,data:s})}async runTask(e,s,t){await this.initedPromise;return new Promise((r,o)=>{const i={name:e,data:s,resolve:r,reject:o,progressUpdate:t};this.taskId+=1,this.taskMap.set(this.taskId,i),this.sendSubProcessMessage({type:"request",id:this.taskId,name:e,data:s})})}}exports.SubProcessProxy=SubProcessProxy;
}(require("licia/lazyImport")(require), require)